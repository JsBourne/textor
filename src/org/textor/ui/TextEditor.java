/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

package org.textor.ui;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.textor.util.Operator;

/**
 *
 * @author Manan
 */
public class TextEditor extends javax.swing.JFrame {
    
    Operator l=new Operator();
    
    /**
     * Creates new form TextEditor
     */
    public TextEditor() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filechooser = new javax.swing.JFileChooser();
        operation = new javax.swing.JComboBox();
        newTextBox = new javax.swing.JTextField();
        position = new javax.swing.JComboBox();
        oldTextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        reset = new javax.swing.JButton();

        filechooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Textor");

        operation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- Select -", "Add", "Delete", "Replace" }));
        operation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                operationItemStateChanged(evt);
            }
        });

        newTextBox.setText("- Enter Text -");
        newTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newTextBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                newTextBoxFocusLost(evt);
            }
        });

        position.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- Select -", "After", "By", "At" }));

        oldTextBox.setText("- Enter Text -");
        oldTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                oldTextBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                oldTextBoxFocusLost(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("In File/Folder :");

        filePath.setText("- Enter File Location -");
        filePath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filePathFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                filePathFocusLost(evt);
            }
        });

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(operation, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(newTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browse))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ok)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reset)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancel))
                            .addComponent(oldTextBox))))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancel, ok, reset});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {newTextBox, oldTextBox});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oldTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse)
                    .addComponent(jLabel1))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(reset)
                    .addComponent(cancel))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * opens the file chooser pop up window if browse button is clicked
     * @param evt 
     */
    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        
        if (evt.getSource() == browse) {
            int returnVal = filechooser.showOpenDialog(this);
            
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File f = filechooser.getSelectedFile();
                String sourceLocation= f.getAbsolutePath();
                filePath.setText(sourceLocation);
                sourceLocation=sourceLocation.replaceAll("\\\\","\\\\\\\\");
                System.out.println("Selected file :- "+sourceLocation);
                
            } else {
                
                System.err.println("File couldn't be accessed properly");
            }
            
            
        } 
    }//GEN-LAST:event_browseActionPerformed

   
    /**
     * exits from the system
     * @param evt 
     */
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        
        System.exit(0);
    }//GEN-LAST:event_cancelActionPerformed
    
    /**
     * validations and operations events triggers after clicking OK button
     * @param evt 
     */
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        String success="";
        
       boolean noErrors=this.doGenericValidations();
      
       if(noErrors){
        success=l.doOperation(filePath.getText().trim(), oldTextBox.getText().trim(), newTextBox.getText().trim(),(String) operation.getSelectedItem(), (String)position.getSelectedItem());
        
        if(success.equalsIgnoreCase("ok")){
            
            JOptionPane.showMessageDialog(null,(String)operation.getSelectedItem()+ " operation completed successfully.");
        }
        else if(success.startsWith("Line number")){
            
            JOptionPane.showMessageDialog(null,
                    success, "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        }
        else{
            
             JOptionPane.showMessageDialog(null,
                    "Some error occurred while performing "+ (String)operation.getSelectedItem() +" operation. Please try again.", "Error Massage",
                    JOptionPane.ERROR_MESSAGE);
        }
       }
    }//GEN-LAST:event_okActionPerformed
    /**
     * setting the text field as blank when focus is gained
     * @param evt 
     */
    private void newTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newTextBoxFocusGained
        
        if(newTextBox.getText().contains("- Enter Text -")){
            
            newTextBox.setText("");
        }
        
    }//GEN-LAST:event_newTextBoxFocusGained
    
    /**
     * setting the text field as blank when focus is gained
     * @param evt 
     */
    private void oldTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oldTextBoxFocusGained
        
        if(oldTextBox.getText().contains("- Enter Text -")){
            
            oldTextBox.setText("");
        }
        
    }//GEN-LAST:event_oldTextBoxFocusGained
    /**
     * setting file path text field as blank when focus is gained on it
     * @param evt 
     */
    private void filePathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filePathFocusGained
        
        if(filePath.getText().contains("- Enter File Location -")){
            
            filePath.setText("");
        }
        
    }//GEN-LAST:event_filePathFocusGained
    
    /**
     * printing new selected item of operation drop down if different item is selected
     * @param evt 
     */
    private void operationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_operationItemStateChanged
        
        System.out.println("Operation :-"+(String)operation.getSelectedItem());
        this.doOperationalValidations((String)operation.getSelectedItem());
    }//GEN-LAST:event_operationItemStateChanged
    
    /**
     * setting default value in new text field if value is null when focus is lost
     * @param evt 
     */
    private void newTextBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newTextBoxFocusLost
        
        String text=newTextBox.getText();
        if(text.length()==0){
            
            newTextBox.setText("- Enter Text -");
        }
    }//GEN-LAST:event_newTextBoxFocusLost
    
    /**
     *  setting default value in old text field if value is null when focus is lost
     * @param evt 
     */
    private void oldTextBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oldTextBoxFocusLost
        
       this.doOldTextBoxValidations();
    }//GEN-LAST:event_oldTextBoxFocusLost
    
    /**
     * resets the file path to default text if inserted value is null when focus is lost
     * @param evt 
     */
    private void filePathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filePathFocusLost
        
        String text=filePath.getText();
        if(text.length()==0){
            
            filePath.setText("- Enter File Location -");
        }
    }//GEN-LAST:event_filePathFocusLost

   /**
    * resets all fields to their default values when reset button is clicked
    * @param evt 
    */
    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        
        this.resetAll();
    }//GEN-LAST:event_resetActionPerformed
    
    /**
     * does generic validations and shows error message is validation fails
     * @return - true is all validations passes or false otherwise
     */
    public boolean doGenericValidations(){
        
        String operationValue=(String)operation.getSelectedItem();
        String positionValue=(String)position.getSelectedItem();
        boolean noErrors=false;
        
        
        if(operationValue.equalsIgnoreCase("- Select -")|| positionValue.equalsIgnoreCase("- Select -")){
            
            JOptionPane.showMessageDialog(null,
                    "Error: Both dropdowns should be selected.", "Error Massage",
                    JOptionPane.ERROR_MESSAGE);
        }
        
       
        else if(!oldTextBox.getText().equals("") && oldTextBox.getText()!=null){
            if (positionValue.equals("At")) {
                
                if(!oldTextBox.getText().matches("[0-9]+")){
                    
                    JOptionPane.showMessageDialog(null,
                            "Error: Please enter positive numeric values for line numbers", "Error Massage",
                            JOptionPane.ERROR_MESSAGE);
                }
                
                if(oldTextBox.getText().trim().equalsIgnoreCase("0")){
                    
                    JOptionPane.showMessageDialog(null,
                            "Error: Line number cannot be zero. Please enter positive value", "Error Massage",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
            
        }
         else if(filePath.getText()==null ||  filePath.getText().trim().length()==0
                || filePath.getText().contains("- Enter File Location -")){
            
            JOptionPane.showMessageDialog(null,
                    "Error: Please provide file location", "Error Massage",
                    JOptionPane.ERROR_MESSAGE);
        }
        else{
            
            noErrors=true;
        }
        
        return noErrors;
    }
    
    /**
     * resets all fields to their default values
     */
    public void resetAll(){
        
        operation.setSelectedIndex(0);
        position.setSelectedIndex(0);
        newTextBox.setText("- Enter Text -");
        oldTextBox.setText("- Enter Text -");
        filePath.setText("- Enter File Location -");
        
    }
    
    /**
     * resets old text field to default value if current value is null
     */
    public void doOldTextBoxValidations(){
        
         String text=oldTextBox.getText();
        
        if(text.length()==0){
            
            oldTextBox.setText("- Enter Text -");
        }
        
       
    }
    /**
     * validates operational drop down based on current items selected
     * @param operationValue 
     */
    public void doOperationalValidations(String operationValue){
        
        ComboBoxModel model;
        boolean before=false,after=false,at=false,by=false;
        if(operationValue.equalsIgnoreCase("add")|| operationValue.equalsIgnoreCase("delete")){
            
            model=position.getModel();
            
            int size = model.getSize();
            for(int i=0;i<size;i++) {
                Object element = model.getElementAt(i);
                System.out.println("Element at " + i + " = " + element);
                if(element.equals("Before")){
                    
                    before=true;
                }
                if(element.equals("After")){
                    
                    after=true;
                }
                if(element.equals("By")){
                    
                    by=true;
                }
                if(element.equals("At")){
                    
                    at=true;
                }
            }
            
            if(!before){
                position.addItem("Before");
            }
            if(!after){
                position.addItem("After");
            }
            if(!at){
                position.addItem("At");
            }
            if(by){
                position.removeItem("By");
            }
            
            if(operationValue.equalsIgnoreCase("delete")){
                
                
                newTextBox.setText("- Disabled -");
                newTextBox.setBackground(UIManager.getColor("TextField.inactiveBackground"));
                newTextBox.setEditable(false);
                
            }
            
            if(operationValue.equalsIgnoreCase("add")){
                
                newTextBox.setEditable(true);
                if(newTextBox.getText().equalsIgnoreCase("- Disabled -")){
                    
                    newTextBox.setText("- Enter Text -");
                }
                
            }
            
            
        }
        else if(operationValue.equalsIgnoreCase("replace")){
            
            newTextBox.setEditable(true);
            if(newTextBox.getText().equalsIgnoreCase("- Disabled -")){
                
                newTextBox.setText("- Enter Text -");
            }
            
            model=position.getModel();
            
            int size = model.getSize();
            for(int i=0;i<size;i++) {
                Object element = model.getElementAt(i);
                System.out.println("Element at " + i + " = " + element);
                if(element.equals("Before")){
                    
                    before=true;
                }
                if(element.equals("After")){
                    
                    after=true;
                }
                if(element.equals("By")){
                    
                    by=true;
                }
                if(element.equals("At")){
                    
                    at=true;
                }
            }
            
            if(before){
                position.removeItem("Before");
            }
            if(after){
                position.removeItem("After");
            }
            if(!at){
                position.addItem("At");
            }
            if(!by){
                position.addItem("By");
            }
        }
        else{
            
            System.err.println("Couldn't find defined operations");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField filePath;
    private javax.swing.JFileChooser filechooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField newTextBox;
    private javax.swing.JButton ok;
    private javax.swing.JTextField oldTextBox;
    private javax.swing.JComboBox operation;
    private javax.swing.JComboBox position;
    private javax.swing.JButton reset;
    // End of variables declaration//GEN-END:variables
}
